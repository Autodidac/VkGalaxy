#version 430

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

#define PI 3.1415926535897932384626433832795028841971693993751058209749445923078164062

//----------------------------------------------------------------------------//

struct Particle
{
	vec2 pos;
	float height;
	float angle;
	float tiltAngle;
	float angleVel;
};

//----------------------------------------------------------------------------//

layout(std140, binding = 0) buffer Particles
{
	Particle particles[];
};

//----------------------------------------------------------------------------//

float u_bulgeRad = 250.0;

float u_angleOffset = 2.0 * PI;
float u_eccentricity = 0.85;

float u_maxRad = 3500.0;

//----------------------------------------------------------------------------//

float _SEED = 0.0;

float rand()
{
    return fract(sin(_SEED++) * 43758.5453);
}

void srand(float seed)
{
	_SEED = seed;
}

//----------------------------------------------------------------------------//

vec2 orbit(float rad, float angle)
{
	vec2 pos = rad * vec2(cos(angle) * u_eccentricity, sin(angle));

	float newRad = length(pos);
	float newAngle = atan(pos.x, pos.y) + u_angleOffset * (max(rad, 0.0) / u_maxRad);

	return newRad * vec2(cos(newAngle), sin(newAngle));
}

float rand_radius()
{
	return rand() * u_maxRad;
}

//----------------------------------------------------------------------------//

void main()
{
	srand(float(gl_GlobalInvocationID.x));

	float rad = rand_radius();
	float angle = rand() * 2.0 * PI;
	float tiltAngle = (rad / u_maxRad) * u_angleOffset;
	float angleVel = -10.0 * sqrt(1.0 / rad);

	Particle particle;
	particle.pos = vec2(rad, u_eccentricity * rad);
	particle.height = 100.0 + 50.0 * (rand() * 2.0 - 1.0);
	particle.angle = angle;
	particle.tiltAngle = tiltAngle;
	particle.angleVel = angleVel;

	particles[gl_GlobalInvocationID.x] = particle;
}